#+TITLE: Intro To Comp Thinking Week 9 Tutorial
#+AUTHOR: Hankertrix
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Question 1

** (i)
Pretty much everywhere, except for within ~lambda~ expressions, lists, and dictionaries.

** (ii)
Yes.

** (iii)
An optional parameter in a function is just a parameter that has a default value that will be passed to the function when it is called if the parameter is not given.

It is created by assigning a parameter to a value when defining the parameter list in a function.

** (iv)
Infinite.

** (v)
Yes.


* Question 2

** (i)
Correct.

** (ii)
Correct.

** (iii)
Correct.

** (iv)
Correct, though there might be a ~TypeError~ thrown within the function since ~p1~ is expecting an ~int~ and ~p2~ is expecting a ~float~.

** (v)
Correct, but unreadable as hell.

** (vi)
Wrong. Positional arguments must come before keyword arguments.


* Question 3
#+begin_src python
def total(num):
    sum += num

sum = 0
for i in range(1, 5):
    total(i)
print(sum)
#+end_src

#+begin_src python
UnboundLocalError: cannot access local variable 'sum' where it is not associated with a value
#+end_src


* Question 4
#+begin_src python :results output
def output(message, times = 1):
    print(message*times)
output("Computational Thinking")
output("Very easy", 3)
#+end_src

#+RESULTS:
: Computational Thinking
: Very easyVery easyVery easy


* Question 5
#+begin_src python :results output
a = 1
b = 2
c = 3
d = 123.4

def add(a, b, c=4):
    global d
    a += b
    b += 1
    d += a
    print(a, b, c)
    return a+b+c

for i in range(1, 4):
    a = add(i, b)
    print(a, b, c)
print(d)
#+end_src

#+RESULTS:
: 3 3 4
: 10 2 3
: 4 3 4
: 11 2 3
: 5 3 4
: 12 2 3
: 135.4

With ~global d~ removed:
#+begin_src python
UnboundLocalError: cannot access local variable 'd' where it is not associated with a value
#+end_src


* Question 6
#+begin_src python :results output
def checkmarks(marks, passes):
    for i in range(len(marks)):
        if 47 <= marks[i] < 50:
            marks[i] = 50
            passes += 1

marklist = [44, 68, 56, 98, 47, 28, 88, 75, 49, 66]

passes = 6
checkmarks(marklist, passes)

print("New mark list: ", marklist)
print("The new number of passes: ", passes)
#+end_src

#+RESULTS:
: New mark list:  [44, 68, 56, 98, 50, 28, 88, 75, 50, 66]
: The new number of passes:  6

** Why ~marklist~ changes
- ~marklist~ is passed to the ~checkmarks~ function by reference due to it being a mutable list, which means the function is given a pointer to actual list to work with inside the ~marks~ variable.
- Hence, the value of ~marklist~ changes after it runs through the ~checkmarks~ function.

** Why ~passes~ does not change
- ~passes~ is passed to the ~checkmarks~ function by value, which means the function is given the actual value of ~passes~, which is 6, to work with.
- This means that the ~passes~ variable doesn't get modified, as the function does not hold a pointer to the ~passes~ variable, but instead holds the actual value of ~passes~.
- Since the ~passes~ variable in the function is local to the function, the global ~passes~ variable does not get updated when the ~passes~ variable inside the function is changed.
- Also, since the function does not return any value, and the ~passes~ variable isn't re-assigned to the return value of the ~checkmarks~ function, the ~passes~ variable will stay the same.


* Lab

** Question 1
Python implementation:
#+begin_src python
def check_digit(string: str, index: int = -1) -> bool:
    "Function to check if the character at the given index is a digit"

    # If the index is greater than the length of the string - 1,
    # return False immediately
    if index > len(string) - 1:
        return False

    # Returns if the character at the given index is a digit
    return string[index].isdigit()
#+end_src

Rust implementation (Rust has no default arguments):
#+begin_src rust

// Function to check if the character at the given index is a digit.
fn check_digit(string: &str, index: usize) -> bool {

    // If the index is greater than the length of the string - 1,
    // return false immediately
    if index > string.len() {
        return false;
    }

    // Returns if the character at the given index is a digit
    string.chars().nth(index).unwrap().is_digit(10)
}
#+end_src

** Question 2
Python implementation:
#+begin_src python
def area(
    base_or_radius: float,
    height: float = 1.0,
    shape: str = "cir"
) -> float | None:
    """
    Function to get the area of a shape.
    If the shape is not given, it defaults to a circle.
    """

    # The dictionary mapping the shape to the area calculation
    area_dict = {
        "cir": math.pi * (base_or_radius ** 2),
        "rect": base_or_radius * height,
        "tri": base_or_radius * height * (1 / 2)
    }

    # Returns the area calculation
    return area_dict.get(shape)
#+end_src

Rust implementation (Rust has no default arguments):
#+begin_src rust

// Function to get the area of a shape
fn area(base_or_radius: f32, height: f32, shape: &str) -> f32 {

    // The dictionary mapping the shape to the area calculation
    let area_dict = std::collections::HashMap::from([
        ("cir", std::f32::consts::PI * (base_or_radius.powi(2))),
        ("rect", base_or_radius * height),
        ("tri", base_or_radius * height * (1.0 / 2.0))
    ]);

    // Returns the area caculation
    *area_dict.get(shape).unwrap()
}
#+end_src

** Question 3
Python implementation:
#+begin_src python
def insert_into_birthday_dict(
    birthday_dict: dict[str, tuple[str, str, str]],
    ic_number: str,
    birthday_tuple: tuple[str, str, str]
) -> None:
    """
    Function to insert an IC number and the corresponding birthday
    into the birthday dictionary.
    """

    # If the birthday dictionary doesn't already contain the IC number,
    # add the birthday to the dictionary
    if birthday_dict.get(ic_number) is not None:
        birthday_dict[ic_number] = birthday_tuple

    # Otherwise, don't do anything
#+end_src

Rust implementation:
#+begin_src rust

// Function to insert an IC number and the coresponding birthday
// into the birthday dictionary
fn insert_into_birthday_dict(
    birthday_dict: &mut std::collections::HashMap<String, [String; 3]>,
    ic_number: &str,
    birthday_tuple: [String; 3]
) {

    // If the birthday dictionary doesn't already contain the IC number,
    // add the birthday to the dictionary
    if birthday_dict.contains_key(ic_number) {
        birthday_dict.insert(ic_number.to_string(), birthday_tuple);
    }
}
#+end_src

** Question 4
Python implementation:
#+begin_src python
def check_birthday_in_birthday_dict(
    birthday_dict: dict[str, tuple[str, str, str]],
    ic_number: str,
    birthday_tuple: tuple[str, str, str]
) -> int:
    """
    Function to check if the IC number and the birthday matches up
    in the birthday dictionary.

    The function returns 1 if the IC number exists and the birthday is the
    same as in the dictionary.

    The function returns 2 if the IC number doesn't exist.

    The function returns 3 if the IC number exists but the birthday
    is different.
    """

    # Gets the birthday tuple from the dictionary
    stored_birthday_tuple = birthday_dict.get(ic_number)

    # If the IC number is not found, then return 2
    if stored_birthday_tuple is None:
        return 2

    # Otherwise, return 1 if the birthday tuple matches up with the given one
    # and return 3 if the birthday tuple doesn't match up with the given one
    return 1 if birthday_tuple == stored_birthday_tuple else 3
#+end_src

Rust implementation:
#+begin_src rust

// Function to check if the IC number and the birthday matches up
// in the birthday dictionary.
// The function returns 1 if the IC number exists and the birthday is the
// same as the dictionary.
// The function returns 2 if the IC number doesn't exist.
// THe function returns 3 if the IC number exists but the birthday
// is different.
fn check_birthday_in_birthday_dict(
    birthday_dict: &mut std::collections::HashMap<String, [String; 3]>,
    ic_number: &str,
    birthday_tuple: [String; 3]
) -> i32 {

    // Gets the birthday tuple from the dictionary
    let stored_birthday_tuple = birthday_dict.get(ic_number);

    // Match statement to match the possible values of stored_birthday_tuple
    match stored_birthday_tuple {
        Some(value) => if birthday_tuple == *value { 1 } else { 3 }
        None => 2
    }
}
#+end_src

** Question 5
Python implementation:
#+begin_src python
def exchange_amount(amount: float, rate: float, mode: bool = True) -> float:
    """
    Function to exchange money between SGD and RM.

    amount is the amount of money to be exchanged.

    rate is the amount in RM for 1 SGD

    mode is a boolean indicating whether the function should convert from
    SGD to RM or from RM to SGD. The default is converting from RM to SGD.
    """

    # Rename the mode to to_sgd
    to_sgd = mode

    # Returns the exchanged amount
    return amount / rate if to_sgd else amount * rate
#+end_src

Rust implementation (Rust has no default arguments):
#+begin_src rust

// Function to exchange money betweeh SGD and RM.
// amount is the amount of money to be exchanged.
// rate is the amount in RM for 1 SGD.
// mode is a boolean indicating whether the function should convert from
// SGD to RM or from RM to SGD.
fn exchange_amount(amount: f32, rate: f32, mode: bool) -> f32 {

    // Rename the mode to to_sgd
    let to_sgd = mode;

    // Returns the exchanged amount
    if to_sgd { amount / rate } else { amount * rate }
}
#+end_src
