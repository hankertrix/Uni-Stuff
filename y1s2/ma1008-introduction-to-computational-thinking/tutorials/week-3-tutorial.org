#+TITLE: Intro To Comp Thinking Week 3 Tutorial
#+AUTHOR: Hankertrix
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Definitions

** Expression
An expression in Python is the same as the mathematical definition of an expression, which means a series of operators that return a value. Basically, an expression *returns* a value.

** Statement
A statement in Python is usually just a line of code in Python. A statement in Python is used to carry out tasks like assigning a variable. A statement *does not* return a value.

*** Difference between an expression and a statement
The main difference between a statement and an expression in Python is that a *statement does not* return a value, while an *expression does* return a value.

* Question 1
A distinction between different types of data allows the computer to know what kind of data it is dealing with, and how to treat it appropriately.


* Question 2

** (i)
2 is an integer.

** (ii)
"2" is a string.

** (iii)
"Two" is a string.

** (iv)
6.71 is a float.

** (v)
4/2 is a float.

** (vi)
7/3 is a float.

** (vii)
6.5 * 2 is a float.

** (viii)
~x~ is an integer.

** (ix)
~y~ is a float.

** (z)
~z~ is undefined. The program will throw a type error as you can only concatenate a string to a string.


* Question 3

** Errors
- ~a = d~ will throw a name error as ~d~ is not defined.
- ~a + c = c~ will throw a syntax error as you cannot assign to a Python expression.
- ~print(A)~ will throw a name error as ~A~ is not defined.
- ~7up = 10~ will throw a syntax error as variable names cannot start with a number.
- ~import = 1003~ will throw a syntax error as you cannot assign to a keyword. Import is a keyword in Python.
- ~print("c" = 1)~ will throw a syntax error as you cannot have an assignment in an expression.
- ~b = math.pi * c~ will throw a name error as ~math~ is not defined. The ~math~ module needs to be imported before being used.
- ~b,c,a = a,b~ will throw a value error as there is not enough values on the right-hand side to assign to the left-hand side of the statement.

** Statements
- ~c = 10~
- ~a = c + 1~
- ~a ** 3~

** Expressions
- ~3 + a~
- ~print("b*b + a*a = c*c")~
- ~a,b,c = c,1,a~
- ~c = b = a = 7~


* Question 4
#+begin_src python
1 -2 3 2
#+end_src


* Question 5
#+begin_src python
2.0 2.2 2.8
#+end_src


* Question 6
The output is:
#+begin_src python
21
#+end_src

An equivalent expression is:
#+begin_src python
30 - (3 ** 2) + (8 // (3 ** 2)) * 10
#+end_src


* Question 7

** (i)
#+begin_src python
# Initialise variables
a = 5
b = 10

# Swap the variables
c = a
a = b
b = c
#+end_src

** (ii)
#+begin_src python
# Initialise the variables
a = 5
b = 10

# Swap the variables without a third variable
a = a + b    # a = 5 + 10 = 15
b = a - b    # b = 15 - 10 = 5
a = a - b    # a = 15 - 5 = 10
#+end_src

** (iii)
#+begin_src python
# Initialise the variables
a = 5
b = 10

# Swap the variables using the Python assignment operator
a, b = b, a
#+end_src


* Lab

** Question 1
Python implementation:
#+begin_src python
import re

# The regex to check if a string is a number
is_number_regex = re.compile(r"^-?\d+(?:\.\d+)?$")


def read_and_print_input() -> None:
    """
    Function to read in a value and print it as an integer, float, and string.
    """

    # The variable representing whether the input is a number or not
    is_number = False

    # While the input isn't a number
    while not is_number:

        # Gets the input
        user_input = input("Please enter a number: ")

        # Set the is_number variable
        is_number = bool(is_number_regex.match(user_input))

    # Print the result as the different data types
    print(f"The integer value is {int(user_input)}")
    print(f"The floating point value is {float(user_input)}")
    print(f"The string value is {str(user_input)}")
#+end_src

Rust implementation:
#+begin_src rust

// The function to read in a value
// and print it as an integer, float and string
fn read_and_print_input() {

    // Initialise the user input variable
    let mut user_input: f64 = 0.0;

    // Initialise the variable to represent
    // whether or not the input is numeric
    let mut is_number = false;

    // Initialise the string to store the user's input
    let mut input = String::new();

    // While the input is not numeric
    while !is_number {

        // Print the prompt
        print!("Please enter a number: ");

        // Flush the stdout
        std::io::stdout().flush().unwrap();

        // Read the user's input to the input variable
        match std::io::stdin().read_line(&mut input) {
            Ok(_number_of_bytes) => (),
            Err(error) => println!("Error: {error}")
        }

        // Match statement to handle errors
        match input.trim().parse::<f64>() {

            // If there are no errors
            Ok(value) => {

                // Adds the user's input to the data mapping
                user_input = value;

                // Set the is_number variable to true
                is_number = true;
            },

            // If there's an error parsing, set is_number is false
            Err(_) => is_number = false
        }
    }

    // Get the user's input as an integer and as a string
    let integer_input = user_input as i64;
    let string_input = user_input.to_string();

    // Print the result as the different data types
    println!("The integer value is {integer_input}");
    println!("The floating point value is {user_input}");
    println!("The string value is {string_input}");
}
#+end_src

** Question 2
Python implementation:
#+begin_src python
import re

# The regex to check if a string is a number
is_number_regex = re.compile(r"^-?\d+(?:\.\d+)?$")


def evaluate_fourth_degree_polynomial() -> None:
    """
    Function to evaluate a fourth degree polynomial of the form:
    ax4 + bx3 + cx2 + dx + e
    """

    # The list of terms
    terms = ["x^4", "x^3", "x^2", "x", "constant"]

    # Initialise the dictionary to store the data
    data: dict[str, float] = {}

    # Iterate over the list of terms
    for term in terms:

        # The variable representing whether the input is a number or not
        is_number = False

        # While the input isn't a number
        while not is_number:

            # Gets the input
            user_input = input(
                f"Please enter the coefficient for the {term} term: "
            )

            # Set the is_number variable
            is_number = bool(is_number_regex.match(user_input))

        # Stores the user input in the data dictionary
        data[term] = float(user_input)

    # The variable representing whether the input is a number or not
    is_number = False

    # While the input isn't a number
    while not is_number:

        # Gets the input
        user_input = input("Please enter the value for x: ")

        # Set the is_number variable
        is_number = bool(is_number_regex.match(user_input))

    # Stores the x value in the data dictionary
    data["x value"] = float(user_input)

    # Gets all the variables
    a = data["x^4"]
    b = data["x^3"]
    c = data["x^2"]
    d = data["x"]
    e = data["constant"]
    x = data["x value"]

    # Calculate the result
    result = a * (x ** 4) + b * (x ** 3) + c * (x ** 2) + d * x + e

    # Prints the result
    print(result)
#+end_src

Rust implementation:
#+begin_src rust

// Function to evaluate a fourth degree polynomial of the form:
// ax4 + bx3 + cx2 + dx + e
fn evaluate_fourth_degree_polynomial() {

    // The list of terms
    let terms = ["x^4", "x^3", "x^2", "x", "constant"];

    // Initialise the hashmap to store the variables
    let mut data = std::collections::HashMap::<&str, f64>::new();

    // Iterates over the list of terms
    for term in terms {

        // Initialise the variable to represent
        // whether or not the input is numeric
        let mut is_number = false;

        // Initialise the string to store the user's input
        let mut input = String::new();

        // While the input is not numeric
        while !is_number {

            // Print the prompt
            print!("Please enter the coefficient for the {term} term: ");

            // Flush the stdout
            std::io::stdout().flush().unwrap();

            // Read the user's input to the input variable
            match std::io::stdin().read_line(&mut input) {
                Ok(_number_of_bytes) => (),
                Err(error) => println!("Error: {error}")
            }

            // Match statement to handle errors
            match input.trim().parse::<f64>() {

                // If there are no errors
                Ok(value) => {

                    // Adds the user's input to the hashmap
                    data.insert(term, value);

                    // Set the is_number variable to true
                    is_number = true;
                },

                // If there's an error parsing, set is_number is false
                Err(_) => is_number = false
            }

            // Make the input an empty string
            input = "".to_string();
        }
    }

    // Initialise the variable to store the user's input
    let mut user_input = 0.0;

    // Initialise the variable to represent
    // whether or not the input is numeric
    let mut is_number = false;

    // Initialise the string to store the user's input
    let mut input = String::new();

    // While the input is not numeric
    while !is_number {

        // Print the prompt
        print!("Please enter the value for x: ");

        // Flush the stdout
        std::io::stdout().flush().unwrap();

        // Read the user's input to the input variable
        match std::io::stdin().read_line(&mut input) {
            Ok(_number_of_bytes) => (),
            Err(error) => println!("Error: {error}")
        }

        // Match statement to handle errors
        match input.trim().parse::<f64>() {

            // If there are no errors
            Ok(value) => {

                // Set the user's input
                user_input = value;

                // Set the is_number variable to true
                is_number = true;
            },

            // If there's an error parsing, set is_number is false
            Err(_) => is_number = false
        }

        // Make the input an empty string
        input = "".to_string();
    }

    // Gets all the variables
    let a = data.get("x^4").unwrap();
    let b = data.get("x^3").unwrap();
    let c = data.get("x^2").unwrap();
    let d = data.get("x").unwrap();
    let e = data.get("constant").unwrap();
    let x = user_input;

    // Calculate the result
    let result = a * x.powi(4) + b * x.powi(3) + c * x.powi(2) + d * x + e;

    // Prints the result
    println!("{}", result);
}
#+end_src

** Question 3
Python implementation:
#+begin_src python
import re
import random

# The regex to check if a string is a number
is_number_regex = re.compile(r"^-?\d+(?:\.\d+)?$")


def bet_against_a_dice() -> None:
    "Function to bet against a dice with an input"

    # Use the random library to generate a random number between 1 and 6
    random_number = random.randint(1, 6)

    # The variable representing whether the input is a number or not
    is_number = False

    # While the input isn't a number
    while not is_number:

        # Print to tell the user what this is about
        print("Please enter a number between 1 and 6 to bet against the dice")

        # Gets the input
        user_input = input("Your bet: ")

        # Set the is_number variable
        is_number = bool(is_number_regex.match(user_input))

        # Gets the given number
        given_number = float(user_input)

        # If the number isn't between 1 and 6 inclusive,
        # set the is number variable to false
        if given_number >= 1 or given_number <= 6:
            is_number = False

    # Get whether or not the given number is equal to the random number
    win = int(given_number) == random_number

    # Prints whether the user has won
    print(
        f"The dice value is {random_number}. You {'win' if win else 'lose'}."
    )
#+end_src

Rust implementation:
#+begin_src rust

// Function to bet against a dice
fn bet_against_a_dice() {

    // Use the random crate to generate a random number between 1 and 6
    // The last number is not included so 7 is used instead of 6
    let random_number = rand::thread_rng().gen_range(1..=6);

    // Initialise the variable to store the user's input
    let mut user_input = 0;

    // Initialise the variable to represent
    // whether or not the input is numeric
    let mut is_number = false;

    // Initialise the string to store the user's input
    let mut input = String::new();

    // While the input is not numeric
    while !is_number {

        // Print to tell the user what this is about
        println!(
            "Please enter a number between 1 and 6 to bet against the dice"
        );

        // Prints the prompt
        print!("Your bet: ");

        // Flush the stdout
        std::io::stdout().flush().unwrap();

        // Read the user's input to the input variable
        match std::io::stdin().read_line(&mut input) {
            Ok(_number_of_bytes) => (),
            Err(error) => println!("Error: {error}")
        }

        // Match statement to handle errors
        match input.trim().parse::<i64>() {

            // If there are no errors
            Ok(value) => {

                // If the user's input is between 1 and 6 inclusive,
                if value >= 1 && value <= 6 {

                    // Set the user's input
                    user_input = value;

                    // Set the is_number variable to true
                    is_number = true;
                }
            },

            // If there's an error parsing, set is_number is false
            Err(_) => is_number = false
        }

        // Make the input an empty string
        input = "".to_string();
    }

    // Get wheter or not the given number is equal to the random number
    let win = user_input == random_number;

    // Prints whether the user has won
    println!(
        "The dice value is {random_number}. You {}.",
        if win { "win" } else { "lose" }
    );
}
#+end_src

** Question 4
Python implementation:
#+begin_src python
import re

# The regex to check if a string is a number
is_number_regex = re.compile(r"^-?\d+(?:\.\d+)?$")


def print_readable_day_string() -> None:
    """
    Function to print a readable day string
    from a floating point number of days.
    """

    # The variable representing whether the input is a number or not
    is_number = False

    # While the input isn't a number
    while not is_number:

        # Gets the input
        user_input = input("Please enter the number of days as a decimal: ")

        # Set the is_number variable
        is_number = bool(is_number_regex.match(user_input))

    # Gets the number of days from the user input
    number_of_days = float(user_input)

    # The list of functions to get the hours, minutes and seconds
    function_list = [
        lambda x: x * 24,
        lambda x: x * 60,
        lambda x: x * 60
    ]

    # The list to store the data
    data: list[float | int] = []

    # Initialise the temporary variable to store the number of days
    temp_number = number_of_days

    # Iterates over the function list
    for function in function_list:

        # Gets the integer for from the floating point number
        int_number = int(temp_number)

        # Adds the integer number to the list
        data.append(int_number)

        # Subtract the integer from the floating point number
        # to get the decimal portion
        decimal_portion = temp_number - int_number

        # Use the function to get the next part of the
        # date using the decimal portion
        temp_number = function(decimal_portion)

    # Add the last number to the list
    data.append(temp_number)

    # Print the readable day string
    print(
        f"""{
            number_of_days
        } days = {
            data[0]
        } days {
            data[1]
        } hours {
            data[2]
        } mins and {
            data[3]
        } secs"""
    )
#+end_src

Rust implementation:
#+begin_src rust

// Function to print a readable day string
// from a floating point number of days
fn print_readable_day_string() {

    // Initialise the variable to store the user's input
    let mut user_input = 0.0;

    // Initialise the variable to represent
    // whether or not the input is numeric
    let mut is_number = false;

    // Initialise the string to store the user's input
    let mut input = String::new();

    // While the input is not numeric
    while !is_number {

        // Prints the prompt
        print!("Please enter the number of days as a decimal: ");

        // Flush the stdout
        std::io::stdout().flush().unwrap();

        // Read the user's input to the input variable
        match std::io::stdin().read_line(&mut input) {
            Ok(_number_of_bytes) => (),
            Err(error) => println!("Error: {error}")
        }

        // Match statement to handle errors
        match input.trim().parse::<f64>() {

            // If there are no errors
            Ok(value) => {

                // Set the user's input
                user_input = value;

                // Set the is_number variable to true
                is_number = true;
            },

            // If there's an error parsing, set is_number is false
            Err(_) => is_number = false
        }

        // Make the input an empty string
        input = "".to_string();
    }

    // Gets the number of days from the user input
    let number_of_days = user_input;

    // The list of functions to get the hours, minutes and seconds
    let function_list = [
        | x: f64 | x * 24.0,
        | x: f64 | x * 60.0,
        | x: f64 | x * 60.0
    ];

    // The list to store the data
    let mut data = Vec::<f64>::new();

    // Initialise the temporary variable to store the number of days
    let mut temp_number = number_of_days;

    // Iterates over the function list
    for function in function_list {

        // Gets the integer from the floating point number
        let int_number = temp_number as i64;

        // Adds the integer number to the list
        data.push(int_number as f64);

        // Subtract the integer from the floating point number
        // to get the decimal portion
        let decimal_portion = temp_number - int_number as f64;

        // Use the function to get the next part of the date
        // using the decimal portion
        temp_number = function(decimal_portion);
    }

    // Add the last number to the list
    data.push(temp_number);

    // Print the readable date string
    println!(
        "{} days = {} days {} hours {} mins and {} secs",
        number_of_days,
        data.get(0).unwrap(),
        data.get(1).unwrap(),
        data.get(2).unwrap(),
        data.get(3).unwrap()
    );
}
#+end_src

** Question 5
Python implementation:
#+begin_src python
import re

# The regex to check if a string is a number
is_number_regex = re.compile(r"^-?\d+(?:\.\d+)?$")


def calculate_triangle_angles() -> None:
    """
    Function to calculate the angles of a triangle,
    given the length of the 3 sides.
    """

    # The list of variables to store the length of
    # the 3 sides of the triangle
    variables = ["a", "b", "c"]

    # The data dictionary to store the user's input
    data: dict[str, float] = {}

    # Iterates over the variables
    for variable in variables:

        # The variable representing whether the input is a number or not
        is_number = False

        # While the input isn't a number
        while not is_number:

            # Gets the input
            user_input = input(
                f"""Please enter the length of the side {
                    variable
                } of the triangle: """
            )

            # Set the is_number variable
            is_number = bool(is_number_regex.match(user_input))

        # Adds the user's input to the data dictionary
        data[variable] = float(user_input)

    # Gets the variables from the data dictionary
    a = data["a"]
    b = data["b"]
    c = data["c"]

    # Calculate the angle of the sides
    angle_A = math.acos((b ** 2 + c ** 2 - a ** 2) / (2 * b * c))
    angle_B = math.acos((a ** 2 + c ** 2 - b ** 2) / (2 * a * c))
    angle_C = math.acos((a ** 2 + b ** 2 - c ** 2) / (2 * a * b))

    # Prints the angles
    print(f"Angle opposite side a in radians is: {angle_A}")
    print(f"Angle opposite side b in radians is: {angle_B}")
    print(f"Angle opposite side c in radians is: {angle_C}")
#+end_src

Rust implementation:
#+begin_src rust

// Function to calculate the angles of a triangle,
// given the length of the 3 sides
fn calculate_triangle_angles() {

    // The list of variables to store the length
    // of the 3 sides of the triangle
    let variables = ["a", "b", "c"];

    // The data hashmap to store the user's input
    let mut data = std::collections::HashMap::<&str, f64>::new();

    // Iterates over the variables
    for variable in variables {

        // Initialise the variable to represent
        // whether or not the input is numeric
        let mut is_number = false;

        // Initialise the string to store the user's input
        let mut input = String::new();

        // While the input is not numeric
        while !is_number {

            // Prints the prompt
            print!(
                "Please enter the length of the side {variable} of the triangle: "
            );

            // Flush the stdout
            std::io::stdout().flush().unwrap();

            // Read the user's input to the input variable
            match std::io::stdin().read_line(&mut input) {
                Ok(_number_of_bytes) => (),
                Err(error) => println!("Error: {error}")
            }

            // Match statement to handle errors
            match input.trim().parse::<f64>() {

                // If there are no errors
                Ok(value) => {

                    // Add the user's input to the hashmap
                    data.insert(variable, value);

                    // Set the is_number variable to true
                    is_number = true;
                },

                // If there's an error parsing, set is_number is false
                Err(_) => is_number = false
            }

            // Make the input an empty string
            input = "".to_string();
        }
    }

    // Gets the variables from the data hashmap
    let a = *data.get("a").unwrap();
    let b = *data.get("b").unwrap();
    let c = *data.get("c").unwrap();

    // Calculate the angle of the sides
    let angle_a = ((b.powi(2) + c.powi(2) - a.powi(2)) / (2.0 * b * c)).acos();
    let angle_b = ((a.powi(2) + c.powi(2) - b.powi(2)) / (2.0 * a * c)).acos();
    let angle_c = ((a.powi(2) + b.powi(2) - c.powi(2)) / (2.0 * a * b)).acos();

    // Prints the angles
    println!("Angle opposite side a in radians is: {angle_a}");
    println!("Angle opposite side b in radians is: {angle_b}");
    println!("Angle opposite side c in radians is: {angle_c}");
}
#+end_src

** Question 6
Python implementation:
#+begin_src python
def print_bunch_of_variables() -> None:
    "Function to print a bunch of variables"

    # Initialise the variables
    a = 0.1
    b = a + a
    c = a + a + a

    # Prints the variables
    print(f"a is {a}")
    print(f"b is {b}")
    print(f"c is {c}")

#+end_src

Rust implementation:
#+begin_src rust

// Function to print a bunch of variables
fn print_bunch_of_variables() {

    // Initialise the variables
    let a = 0.1;
    let b = a + a;
    let c = a + a + a;

    // Print the variables
    println!("a is {a}");
    println!("b is {b}");
    println!("c is {c}");
}
#+end_src

*** Explanation
~a~ is 0.1. By substituting the value 0.1 wherever ~a~ appears, you can get ~b~ and ~c~. ~c~ is not exactly 0.3 due floating points being an approximation. In fact, in ~a~ and ~b~, there is already a tiny inaccuracy in the floating point representation of 0.1 and 0.2 respectively, but Python only prints until a certain precision and hence doesn't show the inaccuracy. When adding 0.1 3 times, the inaccuracy from the floating point representation of 0.1 is multiplied by 3, making the inaccuracy large enough for Python to print out the inaccurate floating point representation. The same explanation also applies to the Rust implementation.
