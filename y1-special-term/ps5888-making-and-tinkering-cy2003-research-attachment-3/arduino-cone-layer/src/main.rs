// The firmware for the Arduino cone layer
//
// Using the template generated by:
// https://github.com/Rahix/avr-hal-template

#![no_std]
#![no_main]
#![feature(abi_avr_interrupt)]

// Modules
mod console;
mod constants;
mod movement;
mod serial;
mod stepper_driver;
mod timer;
mod utils;

// Use declarations
use console::println;
use constants::ALTERNATE_MOTORS;
use heapless::Vec;
use movement::MovementHandler;
use panic_halt as _;
use serial::{
    dispatch_commands, handle_input, new_serial_handler, SerialBufferType,
    UsartWriterInterface,
};
use stepper_driver::{new_stepper_driver, StepperDriver};

/// Function to execute on the Arduino
#[arduino_hal::entry]
fn main() -> ! {
    //

    // Setup code

    // Get the peripherals and the pins on the arduino
    let peripherals = arduino_hal::Peripherals::take().unwrap();
    let pins = arduino_hal::pins!(peripherals);

    // Initialise the console serial handler
    let console_serial_handler = new_serial_handler!(USART0, peripherals, pins);

    // Put the console serial handler in the global variable
    console::put_console_serial_handler(console_serial_handler);

    // Initialise the bluetooth serial handler
    let mut bluetooth_serial_handler =
        new_serial_handler!(USART2, peripherals, pins);

    // Initialise the timer
    timer::init_and_start(peripherals.TC0);

    // Initialise a new stepper driver
    let stepper_driver_e0 = new_stepper_driver!(E0, pins);
    let stepper_driver_e1 = new_stepper_driver!(E1, pins);
    let stepper_driver_x = new_stepper_driver!(X, pins);
    let stepper_driver_y = new_stepper_driver!(Y, pins);
    let stepper_driver_z = new_stepper_driver!(Z, pins);

    // Initialise the vector holding the left side motors
    let mut left_side_motors: Vec<StepperDriver, 2> = heapless::Vec::new();

    // Add the stepper drivers on the left side to the vector
    left_side_motors.push(stepper_driver_e0).unwrap_or_default();
    left_side_motors.push(stepper_driver_e1).unwrap_or_default();

    // Initialise the vector holding the right side motors
    let mut right_side_motors: Vec<StepperDriver, 2> = heapless::Vec::new();

    // Add the stepper drivers on the right side to the vector
    right_side_motors.push(stepper_driver_x).unwrap_or_default();
    right_side_motors.push(stepper_driver_y).unwrap_or_default();

    // Initialise the movement handler
    let mut movement_handler = MovementHandler::new(
        left_side_motors,
        right_side_motors,
        stepper_driver_z,
        false,
        false,
    );

    // Initialise whether to run the movement motors
    // at constant speed
    let mut run_movement_motors_at_constant_speed = false;

    // Print that the Arduino is initialised
    println!("Arduino initialised!");

    // Safety: We are not in a critical section,
    // so enabling interrupts is fine.
    // Enable interrupts globally.
    unsafe { avr_device::interrupt::enable() }

    // The main loop to run
    loop {
        //

        // Parse the input from the bluetooth serial connection
        let bluetooth_input = bluetooth_serial_handler.handle_input();

        // Dispatch the commands for the bluetooth input
        dispatch_commands(
            bluetooth_input,
            &mut movement_handler,
            &mut run_movement_motors_at_constant_speed,
        );

        // Call the function to run all of the motors,
        // and store if any motor is still running
        let any_motor_is_still_running = movement_handler.run_all_motors(
            run_movement_motors_at_constant_speed,
            ALTERNATE_MOTORS,
        );

        // If no motor is still running, disable the motors
        if !any_motor_is_still_running {
            movement_handler.disable_all_motors();
        }
    }
}
